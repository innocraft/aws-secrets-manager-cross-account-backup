# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# https://aws.amazon.com/agreement
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates the necessary resources in the account identified as the backup location of Secrets Manager secrets in order
  to facilitate the Secrets Mangager Backup application.

#:=====
#
# Metadata
#
#:=====

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Resource Location Configuration
        Parameters:
          - pResourceLocationBucket
          - pResourceLocationBucketKeyPrefix
      -
        Label:
          default: Source Account Configuration
        Parameters:
          - pSourceAccountEventAccountIds
      -
        Label:
          default: Backup Account Configuration
        Parameters:
          - pBackupReplicationRegions
    ParameterLabels:
      pBackupReplicationRegions:
        default: Replication Regions
      pResourceLocationBucket:
        default: Bucket Name
      pResourceLocationBucketKeyPrefix:
        default: Object Prefix
      pSourceAccountEventAccountIds:
        default: Account IDs

#:=====
#
# Parameters
#
#:=====

Parameters:
  pBackupReplicationRegions:
    Type: CommaDelimitedList
    Default: ""
    Description: >-
      If region replication is desired for the backup Secrets Manager secrets, provide a comma-separated list of regions
      to serve as replication targets.

  pResourceLocationBucket:
    Type: String
    AllowedPattern: ^(?!\.)(?:\.?(?!-)[a-z\d\-]+(?<!-))$
    ConstraintDescription: >-
      Parameter must contain only lower-case letters, numbers, periods, or hyphens, and may not start or end with a
      period or hyphen or have periods next to hyphens, and be between 3 and 63 characters in length.
    Description: The name of the S3 bucket that contains the deployment resource files.
    MaxLength: 63
    MinLength: 3

  pResourceLocationBucketKeyPrefix:
    Type: String
    AllowedPattern: ^[^\s]*$
    ConstraintDescription: Parameter must not contain any whitespace.
    Default: ""
    Description: >-
      The S3 object key prefix accounting for any folder structure within the bucket that contains the deployment
      resource files.  Do not include any leading or trailing slashes.
    MaxLength: 1024

  pSourceAccountEventAccountIds:
    Type: CommaDelimitedList
    Description: >-
      A comma-separated list of account IDs which will be the source location of Secrets Manager secrets for the Secrets
      Manager Backup application.

#:=====
#
# Conditions
#
#:=====

Conditions:
  cUseReplicationRegions: !Not [ !Equals [ !Join [ ",", !Ref pBackupReplicationRegions ], "" ] ]
  cUseS3KeyPrefix: !Not [ !Equals [ !Ref pResourceLocationBucketKeyPrefix, "" ] ]

#:=====
#
# Resources
#
#:=====

Resources:
  rSecretsManagerBackupEventsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: SecretsManagerBackupEventBus

  rSecretsManagerBackupEventsEventBusEventsEventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref rSecretsManagerBackupEventsEventBus
      Statement:
        Action: events:PutEvents
        Effect: Allow
        Principal:
          AWS: !Ref pSourceAccountEventAccountIds
        Resource: !GetAtt rSecretsManagerBackupEventsEventBus.Arn
      StatementId: SecretsManagerBackupEventBusPolicy

  rSecretsManagerBackupEventsEventBusEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Catch-all rule for the Secrets Manager Backup application.  Receives Secrets Manager events from configured
        accounts and funnels them to the Secrets Manager Backup Lambda function.
      EventBusName: !Ref rSecretsManagerBackupEventsEventBus
      EventPattern:
        source:
          -
            prefix: ""
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt rSecretsManagerBackupBackupLambdaFunction.Arn
          Id: SecretsManagerBackupBackupFunction

  rSecretsManagerBackupEventsEventBusEventsRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rSecretsManagerBackupBackupLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rSecretsManagerBackupEventsEventBusEventsRule.Arn

  rSecretsManagerBackupKMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: KMS CMK used by the Secrets Manager Backup application.
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          -
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: "*"
          -
            Action:
              - kms:Decrypt*
              - kms:Describe*
              - kms:Encrypt*
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Condition:
              ArnEquals:
                kms:EncryptionContext:aws:logs:arn:
                  - !Sub arn:aws:logs:${ AWS::Region }:${ AWS::AccountId }:log-group:/aws/lambda/SecretsManagerBackupBackupFunction
                  - !Sub arn:aws:logs:${ AWS::Region }:${ AWS::AccountId }:log-group:/aws/lambda/SecretsManagerBackupKeyReplicaFunction
            Effect: Allow
            Principal:
              Service: !Sub logs.${ AWS::Region }.amazonaws.com
            Resource: "*"
        Version: 2012-10-17
      MultiRegion: true

  rSecretsManagerBackupBackupLambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W89
            reason: VPC access is not required for the Lambda function.
    Properties:
      Code:
        S3Bucket: !Ref pResourceLocationBucket
        S3Key: !Sub
          - ${ Prefix }secrets_manager_backup.function.backup.zip
          -
            Prefix: !If [ cUseS3KeyPrefix, !Sub "${pResourceLocationBucketKeyPrefix}/", "" ]
      Description: >-
        Function that will respond to Secrets Manager API events funnelled from configured accounts and will back up the
        relevant Secrets Manager secrets.
      Environment:
        Variables:
          BACKUP_KMS_KEY_ID: !Ref rSecretsManagerBackupKMSKey
          BACKUP_REPLICATION_REGIONS: !Join [ ",", !Ref pBackupReplicationRegions ]
      FunctionName: SecretsManagerBackupBackupFunction
      Handler: secrets_manager_backup_backup.handler
      ReservedConcurrentExecutions: 15
      Role: !GetAtt rSecretsManagerBackupBackupLambdaFunctionIAMRole.Arn
      Runtime: python3.12
      Timeout: 300

  rSecretsManagerBackupBackupLambdaFunctionIAMRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W28
            reason: The roles are referenced across accounts and need consistent names.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /secrets_manager_backup/
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Effect: Allow
                Resource: !Sub arn:aws:kms:*:${ AWS::AccountId }:key/${ rSecretsManagerBackupKMSKey }
              -
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:DescribeSecret
                  - secretsmanager:TagResource
                  - secretsmanager:UntagResource
                  - secretsmanager:UpdateSecret
                Effect: Allow
                Resource: !Sub arn:aws:secretsmanager:${ AWS::Region }:${ AWS::AccountId }:secret:*
              -
                Action: sts:AssumeRole
                Effect: Allow
                Resource: arn:aws:iam::*:role/secrets_manager_backup/backup_assume_role
            Version: 2012-10-17
          PolicyName: backup_execution_role_policy
      RoleName: backup_execution_role

  rSecretsManagerBackupBackupLambdaFunctionLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId: !GetAtt rSecretsManagerBackupKMSKey.Arn
      LogGroupName: /aws/lambda/SecretsManagerBackupBackupFunction
      RetentionInDays: 14

  rSecretsManagerBackupKeyReplicaCustomResource:
    Type: Custom::KeyReplica
    Condition: cUseReplicationRegions
    Properties:
      KMSKeyID: !Ref rSecretsManagerBackupKMSKey
      ReplicationRegions: !Ref pBackupReplicationRegions
      ServiceToken: !GetAtt rSecretsManagerBackupKeyReplicaLambdaFunction.Arn

  rSecretsManagerBackupKeyReplicaLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: cUseReplicationRegions
    DependsOn: rSecretsManagerBackupKeyReplicaLambdaFunctionLogsLogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W89
            reason: VPC access is not required for the Lambda function.
    Properties:
      Code:
        S3Bucket: !Ref pResourceLocationBucket
        S3Key: !Sub
          - ${ Prefix }secrets_manager_backup.function.key_replica.zip
          -
            Prefix: !If [ cUseS3KeyPrefix, !Sub "${pResourceLocationBucketKeyPrefix}/", "" ]
      Description: >-
        Function tied to a CloudFormation custom resource that will create KMS CMK replicas in the regions specified for
        Secrets Manager replication.
      FunctionName: SecretsManagerBackupKeyReplicaFunction
      Handler: secrets_manager_backup_key_replica.handler
      ReservedConcurrentExecutions: 5
      Role: !GetAtt rSecretsManagerBackupKeyReplicaLambdaFunctionIAMRole.Arn
      Runtime: python3.12
      Timeout: 900

  rSecretsManagerBackupKeyReplicaLambdaFunctionIAMRole:
    Type: AWS::IAM::Role
    Condition: cUseReplicationRegions
    Metadata:
      cfn_nag:
        rules_to_suppress:
          -
            id: W11
            reason: The * resource is required for the kms:CreateKey action.
          -
            id: W28
            reason: The roles are referenced across accounts and need consistent names.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /secrets_manager_backup/
      Policies:
        -
          PolicyDocument:
            Statement:
              -
                Action:
                  - kms:CreateKey
                Effect: Allow
                Resource: "*"
              -
                Action:
                  - kms:DescribeKey
                Effect: Allow
                Resource: !Sub arn:aws:kms:*:${ AWS::AccountId }:key/*
              -
                Action:
                  - kms:GetKeyPolicy
                  - kms:ReplicateKey
                  - kms:TagResource
                Effect: Allow
                Resource: !GetAtt rSecretsManagerBackupKMSKey.Arn
            Version: 2012-10-17
          PolicyName: key_replica_execution_role_policy
      RoleName: key_replica_execution_role

  rSecretsManagerBackupKeyReplicaLambdaFunctionLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: cUseReplicationRegions
    Properties:
      KmsKeyId: !GetAtt rSecretsManagerBackupKMSKey.Arn
      LogGroupName: /aws/lambda/SecretsManagerBackupKeyReplicaFunction
      RetentionInDays: 14

#:=====
#
# Outputs
#
#:=====

Outputs: {}
